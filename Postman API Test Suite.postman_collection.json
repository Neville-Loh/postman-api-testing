{
	"info": {
		"_postman_id": "43df435b-e752-4224-a2aa-a87a3befda4c",
		"name": "Postman API Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CRUD workflow",
			"item": [
				{
					"name": "Find post by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "377924d4-fe26-4b9e-b4f1-5e5a19a459b5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify post id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify post title\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify post body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.body).to.eql(\"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify post userID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/:postId",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								":postId"
							],
							"variable": [
								{
									"key": "postId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90f4ed65-d1dd-4d75-8a47-8e1d20209837",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(\"An eye catching title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify post body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.body).to.eql(\"A powerful message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify post userId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(101);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"title\": \"An eye catching title\",\r\n    \"body\": \"A powerful message\",\r\n    \"userId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "264a19da-8979-4caa-8fe6-729398ab8465",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify post name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(\"A brand new title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify post body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.body).to.eql(\"A wonderful message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"title\": \"A brand new title\",\r\n    \"body\": \"A wonderful message\",\r\n    \"userId\": 1,\r\n    \"id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts/:postId",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								":postId"
							],
							"variable": [
								{
									"key": "postId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b4666f0-79ee-43e4-b6fd-4be207e5dbdd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/:postId",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								":postId"
							],
							"variable": [
								{
									"key": "postId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Test",
			"item": [
				{
					"name": "Query Does Not Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3576f67-1a49-4c42-a380-7367cfde0784",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Result is empty', function () {\r",
									"    const res = pm.response.json()\r",
									"    pm.expect(res).to.be.empty\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/idontexist",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"idontexist"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "schema validation",
			"item": [
				{
					"name": "POST schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "172212df-6137-4160-a3a2-550dca071c34",
								"exec": [
									"const schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        title: { type: \"string\" },\r",
									"        body: { type: \"string\" },\r",
									"        userId: { type: \"integer\" },\r",
									"    },\r",
									"    required: [\"id\", \"title\", \"body\",\"userId\"]\r",
									"};\r",
									"\r",
									"\r",
									"pm.test(\"Verify post schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"title\": \"An eye catching title\",\r\n    \"body\": \"A powerful message\",\r\n    \"userId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "701256da-c094-49e2-b5a0-6fe70fa30c4f",
								"exec": [
									"const schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        title: { type: \"string\" },\r",
									"        body: { type: \"string\" },\r",
									"        userId: { type: \"integer\" },\r",
									"    },\r",
									"    required: [\"id\", \"title\", \"body\",\"userId\"]\r",
									"};\r",
									"\r",
									"\r",
									"pm.test(\"Verify put schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"title\": \"An eye catching title\",\r\n    \"body\": \"A powerful message\",\r\n    \"userId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts/:postId",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								":postId"
							],
							"variable": [
								{
									"key": "postId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c8c187a-9fa0-4b63-9ce5-7da254be9073",
								"exec": [
									"const schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        title: { type: \"string\" },\r",
									"        body: { type: \"string\" },\r",
									"        userId: { type: \"integer\" },\r",
									"    },\r",
									"    required: [\"id\", \"title\", \"body\",\"userId\"]\r",
									"};\r",
									"\r",
									"\r",
									"pm.test(\"Verify get schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/:postId",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								":postId"
							],
							"variable": [
								{
									"key": "postId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb8bc049-3574-4a05-8a54-646d155d93c6",
								"exec": [
									"pm.test('expect empty response', function () {\r",
									"    pm.expect(pm.response.json()).to.be.empty;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/posts/:postId",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								":postId"
							],
							"variable": [
								{
									"key": "postId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}